//
//  main.swift
//  NauticalCalcProject
//
//  Created by –í–∞–ª–µ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä–µ–≤–∞ on 08.10.2025.
//

import Foundation

// –ü–†–û–ï–ö–¢-–ë–õ–û–ö–ù–û–¢
// —Å–∫–æ–ø–∏—Ä—É–π –∫–æ–¥ –∏–∑ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ || –∏—Å–ø–æ–ª—å–∑—É–π CompleteBrazilToFrance.swift

/* üìÅ NauticalNotebook/
 ‚îú‚îÄ‚îÄ üìÑ Main.swift (–ø—É—Å—Ç–æ–π)
 ‚îú‚îÄ‚îÄ üìÅ Examples/
 ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ CompleteBrazilFrance.swift
 ‚îú‚îÄ‚îÄ üìÑ MapPoint.swift
 ‚îú‚îÄ‚îÄ üìÑ NavigationCalculator.swift
 ‚îú‚îÄ‚îÄ üìÑ DistanceCalculator.swift
 ‚îú‚îÄ‚îÄ üìÑ BrazilToFranceRoute.swift
 ‚îú‚îÄ‚îÄ üìÑ RoutePrinter.swift
 ‚îú‚îÄ‚îÄ üìÑ DistancePrinter.swift
 ‚îú‚îÄ‚îÄ üìÑ RouteStatistics.swift
 ‚îú‚îÄ‚îÄ üìÑ FuelCalculator.swift
 ‚îú‚îÄ‚îÄ üìÑ TimeCalculator.swift
 ‚îî‚îÄ‚îÄ üìÑ SegmentTimeCalculator.swift */

struct MapPoint {
    let name: String
    let latitude: Double
    let longitude: Double
    
    var coordinatesString: String {
        return "\(String(format: "%.2f", latitude))¬∞, \(String(format: "%.2f", longitude))¬∞"
    }
}

func calculateNewPoint(from start: MapPoint, distanceKm: Double, courseDegrees: Double, name: String) -> MapPoint {
    let earthRadiusKm = 6371.0
    
    let distanceRadians = distanceKm / earthRadiusKm
    let courseRadians = courseDegrees * .pi / 180.0
    
    let startLatRad = start.latitude * .pi / 180.0
    let startLonRad = start.longitude * .pi / 180.0
    
    let newLatRad = asin(
        sin(startLatRad) * cos(distanceRadians) +
        cos(startLatRad) * sin(distanceRadians) * cos(courseRadians)
    )
    
    let newLonRad = startLonRad + atan2(
        sin(courseRadians) * sin(distanceRadians) * cos(startLatRad),
        cos(distanceRadians) - sin(startLatRad) * sin(newLatRad)
    )
    
    let newLat = newLatRad * 180.0 / .pi
    let newLon = newLonRad * 180.0 / .pi
    
    return MapPoint(name: name, latitude: newLat, longitude: newLon)
}

// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
let startPoint = MapPoint(
    name: "–í–∏–ª–ª–∞ –≤–æ–∑–ª–µ –≥.–ö—É—Ä–∏—Ç–∏–±—ã,–ø–æ–±–µ—Ä–µ–∂—å–µ –∑–∞–ª–∏–≤–∞ –ü–∞—Ä–∞–Ω–∞–≥—É–∞, –ë—Ä–∞–∑–∏–ª–∏—è",
    latitude: -25.45,
    longitude: -48.35
)

// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
let point2 = calculateNewPoint(
    from: startPoint,
    distanceKm: 800,
    courseDegrees: 180,
    name: "–Æ–∂–Ω–∞—è –ê—Ç–ª–∞–Ω—Ç–∏–∫–∞"
)

let point3 = calculateNewPoint(
    from: point2,
    distanceKm: 80 * 14,
    courseDegrees: 0,
    name: "–í–æ–∑–ª–µ —Ç—Ä–æ–ø–∏–∫–∞ –ö–æ–∑–µ—Ä–æ–≥–∞"
)

let point4 = calculateNewPoint(
    from: point3,
    distanceKm: 70 * 80,
    courseDegrees: 0,
    name: "–°–µ–≤–µ—Ä–Ω–∞—è –ê—Ç–ª–∞–Ω—Ç–∏–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –°–µ–≤.–ø–æ–ª—É—à–∞—Ä–∏–µ"
)

let point5 = calculateNewPoint(
    from: point4,
    distanceKm: 3500,
    courseDegrees: 80,
    name: "–Æ–∂–Ω–æ–µ –ú–∞—Ä–æ–∫–∫–æ - 200 –∫–º —Å–µ–≤–µ—Ä–Ω–µ–µ –ú—ã—Å–∞ –ë–ª–∞–Ω–∫–æ"
)

let point6 = MapPoint(
    name: "–ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ, –ø–æ—Ä—Ç –î–∞—Ö–ª–∞",
    latitude: 23.70,
    longitude: -15.93
)

let point7 = MapPoint(
    name: "–§—Ä–∞–Ω—Ü–∏—è, –ø—É—Å—Ç—ã–Ω–Ω–∞—è –±—É—Ö—Ç–∞ –≤ –ë—Ä–µ—Ç–∞–Ω–∏",
    latitude: 48.70,
    longitude: -3.98
)

// –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
let route = [startPoint, point2, point3, point4, point5, point6, point7]

func distanceBetween(_ point1: MapPoint, _ point2: MapPoint) -> Double {
    let earthRadius = 6371.0
    
    let lat1 = point1.latitude * .pi / 180
    let lon1 = point1.longitude * .pi / 180
    let lat2 = point2.latitude * .pi / 180
    let lon2 = point2.longitude * .pi / 180
    
    let dLat = lat2 - lat1
    let dLon = lon2 - lon1
    
    let a = sin(dLat/2) * sin(dLat/2) +
            cos(lat1) * cos(lat2) *
            sin(dLon/2) * sin(dLon/2)
    let c = 2 * atan2(sqrt(a), sqrt(1-a))
    
    return earthRadius * c
}

// –í–´–í–û–î –ú–ê–†–®–†–£–¢–ê
print("üó∫Ô∏è –ü–û–õ–ù–´–ô –ú–ê–†–®–†–£–¢ –ë–†–ê–ó–ò–õ–ò–Ø-–§–†–ê–ù–¶–ò–Ø")

for (index, point) in route.enumerated() {
    print("\(index + 1). \(point.name) - \(point.coordinatesString)")
}

// –†–ê–°–°–¢–û–Ø–ù–ò–Ø
print("üìè –†–ê–°–°–¢–û–Ø–ù–ò–Ø –ú–ï–ñ–î–£ –¢–û–ß–ö–ê–ú–ò")

var totalDistance = 0.0
for i in 0..<route.count - 1 {
    let distance = distanceBetween(route[i], route[i + 1])
    totalDistance += distance
    print("\(i + 1) ‚Üí \(i + 2): \(String(format: "%.0f", distance)) –∫–º")
}

print("\nüìä –°–£–ú–ú–ê–†–ù–û–ï –†–ê–°–°–¢–û–Ø–ù–ò–ï: \(String(format: "%.0f", totalDistance)) –∫–º")

// –°–¢–ê–¢–ò–°–¢–ò–ö–ê
print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–†–®–†–£–¢–ê")

print("–í—Å–µ–≥–æ —Ç–æ—á–µ–∫: \(route.count)")
print("–°—Ç–∞—Ä—Ç: \(route.first!.name)")
print("–§–∏–Ω–∏—à: \(route.last!.name)")

if let southernmost = route.min(by: { $0.latitude < $1.latitude }) {
    print("–°–∞–º–∞—è —é–∂–Ω–∞—è —Ç–æ—á–∫–∞: \(southernmost.name) (\(String(format: "%.2f", southernmost.latitude))¬∞)")
}
if let northernmost = route.max(by: { $0.latitude < $1.latitude }) {
    print("–°–∞–º–∞—è —Å–µ–≤–µ—Ä–Ω–∞—è —Ç–æ—á–∫–∞: \(northernmost.name) (\(String(format: "%.2f", northernmost.latitude))¬∞)")
}

// –†–ê–°–ß–ï–¢–´ –¢–û–ü–õ–ò–í–ê –ò –í–†–ï–ú–ï–ù–ò
print("‚õΩ –†–ê–°–ß–ï–¢ –¢–û–ü–õ–ò–í–ê –ò –í–†–ï–ú–ï–ù–ò")

let averageSpeedKmh = 80.0
let fuelConsumptionPerHour = 25.0
let fuelPricePerLiter = 1.2

let totalHours = totalDistance / averageSpeedKmh
let totalLiters = totalHours * fuelConsumptionPerHour
let totalCost = totalLiters * fuelPricePerLiter
let days = Int(totalHours) / 24
let hours = Int(totalHours) % 24

print("–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: \(String(format: "%.0f", totalLiters)) –ª–∏—Ç—Ä–æ–≤")
print("–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞: \(String(format: "%.0f", totalCost)) —É.–µ.")
print("–û–±—â–µ–µ –≤—Ä–µ–º—è: \(String(format: "%.1f", totalHours)) —á–∞—Å–æ–≤")
print("–≠—Ç–æ: \(days) –¥–Ω–µ–π \(hours) —á–∞—Å–æ–≤")

// –í–†–ï–ú–Ø –ü–û –û–¢–†–ï–ó–ö–ê–ú
print("‚è±Ô∏è –í–†–ï–ú–Ø –ü–û –û–¢–†–ï–ó–ö–ê–ú")

for i in 0..<route.count - 1 {
    let distance = distanceBetween(route[i], route[i + 1])
    let hours = distance / 80.0
    print("\(i + 1). \(route[i].name) ‚Üí \(route[i + 1].name)")
    print("   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: \(String(format: "%.0f", distance)) –∫–º")
    print("   –í—Ä–µ–º—è: \(String(format: "%.1f", hours)) —á–∞—Å–æ–≤")
}
